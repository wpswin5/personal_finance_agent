{"version":3,"file":"static/js/787.1f2f1dfb.chunk.js","mappings":"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","sources":["components/PlaidData.js","pages/Transactions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst PlaidData = ({ token, plaidConnected, showTabs = true }) => {\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  // start on connections tab to avoid immediately attempting to fetch accounts\n  // which may be unavailable for some users or endpoints.\n  const [activeTab, setActiveTab] = useState('connections');\n\n  // Fetch accounts\n  const fetchAccounts = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:8000/plaid/accounts', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        // treat 404/204 as empty result rather than a hard failure\n        if (response.status === 404 || response.status === 204) {\n          setAccounts([]);\n          return;\n        }\n        throw new Error('Failed to fetch accounts');\n      }\n\n      const data = await response.json();\n      setAccounts(data.accounts || []);\n    } catch (error) {\n      console.error('Error fetching accounts:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch transactions\n  const fetchTransactions = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:8000/plaid/transactions?count=50', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 404 || response.status === 204) {\n          setTransactions([]);\n          return;\n        }\n        throw new Error('Failed to fetch transactions');\n      }\n\n      const data = await response.json();\n      setTransactions(data.transactions || []);\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch connections\n  const fetchConnections = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:8000/plaid/connections', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 404 || response.status === 204) {\n          setConnections([]);\n          return;\n        }\n        throw new Error('Failed to fetch connections');\n      }\n\n      const data = await response.json();\n      setConnections(data || []);\n    } catch (error) {\n      console.error('Error fetching connections:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete connection\n  const deleteConnection = async (connectionId) => {\n    if (!window.confirm('Are you sure you want to delete this connection?')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`http://localhost:8000/plaid/connections/${connectionId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete connection');\n      }\n\n      // Refresh connections\n      fetchConnections();\n    } catch (error) {\n      console.error('Error deleting connection:', error);\n      setError(error.message);\n    }\n  };\n\n  useEffect(() => {\n    if (plaidConnected && token) {\n      fetchConnections();\n    }\n  }, [plaidConnected, token]);\n\n  useEffect(() => {\n    if (plaidConnected && token && activeTab === 'accounts') {\n      fetchAccounts();\n    } else if (plaidConnected && token && activeTab === 'transactions') {\n      fetchTransactions();\n    }\n  }, [plaidConnected, token, activeTab]);\n\n  // If embedded in the Accounts page we don't want the tabs to show at all.\n  if (!showTabs) return null;\n\n  if (!plaidConnected) {\n    return (\n      <div className=\"alert alert-info\">\n        Connect your bank account to view your financial data.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"plaid-data-container\">\n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === 'connections' ? 'active' : ''}`}\n          onClick={() => setActiveTab('connections')}\n        >\n          Connections\n        </button>\n        <button \n          className={`tab ${activeTab === 'accounts' ? 'active' : ''}`}\n          onClick={() => setActiveTab('accounts')}\n        >\n          Accounts\n        </button>\n        <button \n          className={`tab ${activeTab === 'transactions' ? 'active' : ''}`}\n          onClick={() => setActiveTab('transactions')}\n        >\n          Transactions\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"alert alert-danger\">\n          Error: {error}\n        </div>\n      )}\n\n      {loading && (\n        <div className=\"loading\">\n          Loading...\n        </div>\n      )}\n\n      {activeTab === 'connections' && (\n        <div className=\"connections-tab\">\n          <h3>Bank Connections</h3>\n          {connections.length === 0 ? (\n            <p>No bank connections found.</p>\n          ) : (\n            <div className=\"connections-list\">\n              {connections.map((connection) => (\n                <div key={connection.id} className=\"connection-card\">\n                  <div className=\"connection-info\">\n                    <h4>{connection.institution_name || 'Unknown Institution'}</h4>\n                    <p>Item ID: {connection.item_id}</p>\n                    <p>Connected: {new Date(connection.created_at).toLocaleDateString()}</p>\n                  </div>\n                  <button \n                    className=\"btn btn-danger btn-sm\"\n                    onClick={() => deleteConnection(connection.id)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {activeTab === 'accounts' && (\n        <div className=\"accounts-tab\">\n          <h3>Accounts</h3>\n          {accounts.length === 0 ? (\n            <p>No accounts found.</p>\n          ) : (\n            <div className=\"accounts-list\">\n              {accounts.map((account) => (\n                <div key={account.account_id} className=\"account-card\">\n                  <h4>{account.name}</h4>\n                  <p>Type: {account.type} {account.subtype && `(${account.subtype})`}</p>\n                  <p>Balance: ${account.balance.toFixed(2)} {account.currency}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {activeTab === 'transactions' && (\n        <div className=\"transactions-tab\">\n          <h3>Recent Transactions</h3>\n          {transactions.length === 0 ? (\n            <p>No transactions found.</p>\n          ) : (\n            <div className=\"transactions-list\">\n              {transactions.map((transaction) => (\n                <div key={transaction.transaction_id} className=\"transaction-card\">\n                  <div className=\"transaction-info\">\n                    <h4>{transaction.name}</h4>\n                    {transaction.merchant_name && (\n                      <p>Merchant: {transaction.merchant_name}</p>\n                    )}\n                    <p>Date: {new Date(transaction.date).toLocaleDateString()}</p>\n                    <p>Category: {transaction.category.join(', ')}</p>\n                    {transaction.pending && <span className=\"badge\">Pending</span>}\n                  </div>\n                  <div className=\"transaction-amount\">\n                    <span className={transaction.amount > 0 ? 'debit' : 'credit'}>\n                      ${Math.abs(transaction.amount).toFixed(2)}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlaidData;","import React, { useState, useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport PlaidData from '../components/PlaidData';\nimport './Transactions.css';\n\nconst Transactions = () => {\n  const { getAccessTokenSilently, isAuthenticated } = useAuth0();\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const getToken = async () => {\n      if (isAuthenticated) {\n        try {\n          const accessToken = await getAccessTokenSilently({\n            audience: \"https://fastapiexample.com\",\n            scope: \"test:read\"\n          });\n          setToken(accessToken);\n        } catch (error) {\n          console.error('Error getting access token:', error);\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    getToken();\n  }, [isAuthenticated, getAccessTokenSilently]);\n\n  if (loading) {\n    return (\n      <div className=\"transactions-container\">\n        <div className=\"loading-spinner\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!token) {\n    return (\n      <div className=\"transactions-container\">\n        <div className=\"error-message\">\n          Unable to authenticate. Please try refreshing the page.\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"transactions-container\">\n      <div className=\"transactions-header\">\n        <h1>Transactions</h1>\n        <p>View and analyze your recent transactions</p>\n      </div>\n      \n      <div className=\"transactions-content\">\n        <PlaidData token={token} plaidConnected={true} />\n      </div>\n    </div>\n  );\n};\n\nexport default Transactions;"],"names":["_ref","token","plaidConnected","showTabs","accounts","setAccounts","useState","transactions","setTransactions","connections","setConnections","loading","setLoading","error","setError","activeTab","setActiveTab","fetchConnections","async","response","fetch","headers","concat","ok","status","Error","data","json","console","message","useEffect","fetchAccounts","fetchTransactions","_jsxs","className","children","_jsx","onClick","length","map","connection","institution_name","item_id","Date","created_at","toLocaleDateString","window","confirm","connectionId","method","deleteConnection","id","account","name","type","subtype","balance","toFixed","currency","account_id","transaction","merchant_name","date","category","join","pending","amount","Math","abs","transaction_id","Transactions","getAccessTokenSilently","isAuthenticated","useAuth0","setToken","accessToken","audience","scope","getToken","PlaidData"],"sourceRoot":""}